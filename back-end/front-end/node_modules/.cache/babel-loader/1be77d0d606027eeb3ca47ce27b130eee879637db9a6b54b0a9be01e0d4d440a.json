{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport baseUrlWithHeaders from \"../baseUrlWithHeaders\";\nexport const productApi = createApi({\n  reducerPath: 'productApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:5000'\n  }),\n  tagTypes: 'Product',\n  endpoints: builder => ({\n    getAllProducts: builder.query({\n      query: () => 'products',\n      providesTags: ['Product']\n    }),\n    getSingleProduct: builder.query({\n      query: id => ({\n        url: `/products/${id}`,\n        method: 'GET'\n      }),\n      providesTags: ['Product']\n    }),\n    getSingleProductBySlug: builder.query({\n      query: slug => ({\n        url: `/products/details/${slug}`,\n        method: 'GET'\n      }),\n      providesTags: ['Product']\n    }),\n    addNewProducts: builder.mutation({\n      query: product => ({\n        url: '/products',\n        method: 'POST',\n        body: product\n      }),\n      invalidatesTags: ['Product']\n    }),\n    updateProduct: builder.mutation({\n      query: product => ({\n        url: `/products/${product._id}`,\n        method: 'PUT',\n        body: product.data\n      }),\n      invalidatesTags: ['Product']\n    }),\n    deleteProduct: builder.mutation({\n      query: id => ({\n        url: `products/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: ['Product']\n    })\n  })\n});\nexport const {\n  useGetAllProductsQuery,\n  useAddNewProductsMutation,\n  useGetSingleProductQuery,\n  useGetSingleProductBySlugQuery,\n  useDeleteProductMutation,\n  useUpdateProductMutation\n} = productApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","baseUrlWithHeaders","productApi","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getAllProducts","query","providesTags","getSingleProduct","id","url","method","getSingleProductBySlug","slug","addNewProducts","mutation","product","body","invalidatesTags","updateProduct","_id","data","deleteProduct","useGetAllProductsQuery","useAddNewProductsMutation","useGetSingleProductQuery","useGetSingleProductBySlugQuery","useDeleteProductMutation","useUpdateProductMutation"],"sources":["D:/e-commerce/back-end/front-end/src/features/productApi.js"],"sourcesContent":["import {createApi, fetchBaseQuery} from \"@reduxjs/toolkit/query/react\"\r\nimport baseUrlWithHeaders from \"../baseUrlWithHeaders\"\r\nexport const productApi = createApi({\r\n    reducerPath:'productApi',\r\n    baseQuery:fetchBaseQuery({baseUrl:'http://localhost:5000',}),\r\n    tagTypes:'Product',\r\n    endpoints:(builder)=>({\r\n        getAllProducts : builder.query({\r\n            query:()=>'products',\r\n            providesTags:['Product']\r\n            \r\n        }),\r\n\r\n        getSingleProduct:builder.query({\r\n            query:(id)=>({\r\n                url:`/products/${id}`,\r\n                method:'GET'\r\n            }),\r\n            providesTags:['Product']\r\n        }),\r\n\r\n        getSingleProductBySlug:builder.query({\r\n            query:(slug)=>({\r\n                url:`/products/details/${slug}`,\r\n                method:'GET'\r\n            }),\r\n            providesTags:['Product']\r\n        }),\r\n\r\n        addNewProducts : builder.mutation({\r\n            query:(product) => ({\r\n                url:'/products',\r\n                method:'POST',\r\n                body:product\r\n            }),\r\n            invalidatesTags:['Product']\r\n        }),\r\n\r\n        updateProduct: builder.mutation({\r\n            query:(product)=>({\r\n                url:`/products/${product._id}`,\r\n                method:'PUT',\r\n                body:product.data\r\n            }),\r\n            invalidatesTags:['Product']\r\n        }),\r\n\r\n        deleteProduct:builder.mutation({\r\n            query:(id)=>({\r\n                url:`products/${id}`,\r\n                method:'DELETE'\r\n            }),\r\n            invalidatesTags:['Product']\r\n        })\r\n\r\n    })\r\n\r\n})\r\n\r\nexport const {useGetAllProductsQuery,useAddNewProductsMutation, useGetSingleProductQuery,useGetSingleProductBySlugQuery,useDeleteProductMutation, useUpdateProductMutation} = productApi"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,cAAc,QAAO,8BAA8B;AACtE,OAAOC,kBAAkB,MAAM,uBAAuB;AACtD,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAAC;EAChCI,WAAW,EAAC,YAAY;EACxBC,SAAS,EAACJ,cAAc,CAAC;IAACK,OAAO,EAAC;EAAwB,CAAC,CAAC;EAC5DC,QAAQ,EAAC,SAAS;EAClBC,SAAS,EAAEC,OAAO,KAAI;IAClBC,cAAc,EAAGD,OAAO,CAACE,KAAK,CAAC;MAC3BA,KAAK,EAAC,MAAI,UAAU;MACpBC,YAAY,EAAC,CAAC,SAAS;IAE3B,CAAC,CAAC;IAEFC,gBAAgB,EAACJ,OAAO,CAACE,KAAK,CAAC;MAC3BA,KAAK,EAAEG,EAAE,KAAI;QACTC,GAAG,EAAE,aAAYD,EAAG,EAAC;QACrBE,MAAM,EAAC;MACX,CAAC,CAAC;MACFJ,YAAY,EAAC,CAAC,SAAS;IAC3B,CAAC,CAAC;IAEFK,sBAAsB,EAACR,OAAO,CAACE,KAAK,CAAC;MACjCA,KAAK,EAAEO,IAAI,KAAI;QACXH,GAAG,EAAE,qBAAoBG,IAAK,EAAC;QAC/BF,MAAM,EAAC;MACX,CAAC,CAAC;MACFJ,YAAY,EAAC,CAAC,SAAS;IAC3B,CAAC,CAAC;IAEFO,cAAc,EAAGV,OAAO,CAACW,QAAQ,CAAC;MAC9BT,KAAK,EAAEU,OAAO,KAAM;QAChBN,GAAG,EAAC,WAAW;QACfC,MAAM,EAAC,MAAM;QACbM,IAAI,EAACD;MACT,CAAC,CAAC;MACFE,eAAe,EAAC,CAAC,SAAS;IAC9B,CAAC,CAAC;IAEFC,aAAa,EAAEf,OAAO,CAACW,QAAQ,CAAC;MAC5BT,KAAK,EAAEU,OAAO,KAAI;QACdN,GAAG,EAAE,aAAYM,OAAO,CAACI,GAAI,EAAC;QAC9BT,MAAM,EAAC,KAAK;QACZM,IAAI,EAACD,OAAO,CAACK;MACjB,CAAC,CAAC;MACFH,eAAe,EAAC,CAAC,SAAS;IAC9B,CAAC,CAAC;IAEFI,aAAa,EAAClB,OAAO,CAACW,QAAQ,CAAC;MAC3BT,KAAK,EAAEG,EAAE,KAAI;QACTC,GAAG,EAAE,YAAWD,EAAG,EAAC;QACpBE,MAAM,EAAC;MACX,CAAC,CAAC;MACFO,eAAe,EAAC,CAAC,SAAS;IAC9B,CAAC;EAEL,CAAC;AAEL,CAAC,CAAC;AAEF,OAAO,MAAM;EAACK,sBAAsB;EAACC,yBAAyB;EAAEC,wBAAwB;EAACC,8BAA8B;EAACC,wBAAwB;EAAEC;AAAwB,CAAC,GAAG9B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}